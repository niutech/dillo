dnl Process this file with aclocal, autoconf and automake.

AC_INIT([dplus], [0.5b])
AC_DEFINE([RELEASE_DATE], ["Oct 15 2013"], [Program release date])

dnl Detect the canonical target build environment
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR([src/dplus.cc])
AC_CONFIG_HEADERS([config.h])

sysconfdir=${sysconfdir}/${PACKAGE}

dnl Options

AC_ARG_WITH(jpeg-lib, [  --with-jpeg-lib=DIR     Specify where to find libjpeg], LIBJPEG_LIBDIR=$withval)
AC_ARG_WITH(jpeg-inc, [  --with-jpeg-inc=DIR     Specify where to find libjpeg's headers], LIBJPEG_INCDIR=$withval)

AC_ARG_ENABLE(debug,  [  --enable-debug          Build with additional debugging symbols],
		    , enable_debug=no)
AC_ARG_ENABLE(efence, [  --enable-efence         Try to compile and run with Electric Fence],
                    , enable_efence=no)
AC_ARG_ENABLE(gprof,  [  --enable-gprof          Try to compile and run with profiling enabled],
                    , enable_gprof=no)
AC_ARG_ENABLE(insure, [  --enable-insure         Try to compile and run with Insure++],
                    , enable_insure=no)
AC_ARG_ENABLE(test,   [  --enable-test           Build the Dillo renderer test suite)],
                  ,   enable_test=no)
AC_ARG_ENABLE(ssl,    [  --enable-ssl            Enable ssl, https (ALPHA CODE)],
                    , enable_ssl=no)
AC_ARG_ENABLE(cyassl, [  --enable-cyassl         Enable ssl, https using CyaSSL (ALPHA CODE)],
                    , enable_cyassl=no)
AC_ARG_ENABLE(ipv6,   [  --enable-ipv6           Build with support for IPv6], , )
AC_ARG_ENABLE(cookies,[  --disable-cookies       Don't compile support for cookies],
                    , enable_cookies=yes)
AC_ARG_ENABLE(persistent-cookies,[  --enable-persistent-cookies  Enable writing cookies to disk],
              enable_cookies_txt=$enableval, enable_cookies_txt=no)
AC_ARG_ENABLE(png,    [  --disable-png           Disable support for PNG images],
              enable_png=$enableval, enable_png=yes)
AC_ARG_ENABLE(jpeg,   [  --disable-jpeg          Disable support for JPEG images],
              enable_jpeg=$enableval, enable_jpeg=yes)
AC_ARG_ENABLE(gif,    [  --disable-gif           Disable support for GIF images],
              enable_gif=$enableval, enable_gif=yes)
AC_ARG_ENABLE(threaded-dns,[  --disable-threaded-dns  Disable the advantage of a reentrant resolver library],
              enable_threaded_dns=$enableval, enable_threaded_dns=yes)
AC_ARG_ENABLE(legacy-winsock,[  --enable-legacy-winsock Build using the Windows Sockets 1.1 library],
              enable_legacy_winsock=$enableval, enable_legacy_winsock=no)
AC_ARG_ENABLE(downloads,[  --disable-downloads     Disables support for downloads],
              enable_downloads=$enableval, enable_downloads=yes)
AC_ARG_ENABLE(shared_libcurl,[  --enable-shared-libcurl Build using a shared libcurl (default is static)],
              enable_shared_libcurl=$enableval, enable_shared_libcurl=no)
AC_ARG_ENABLE(native-dialogs,[  --disable-native-dialogs Disable support for native file dialogs],
              enable_native_dialogs=$enableval, enable_native_dialogs=yes)
AC_ARG_ENABLE(printer,[  --enable-printer        Build with printing support],
              enable_printer=$enableval, enable_printer=no)
AC_ARG_ENABLE(rtfl,   [  --enable-rtfl           Build with rtfl messages (for debugging rendering)])
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_CPP

AC_SUBST(RC)
AC_CHECK_TOOL(RC, windres,)
AC_ARG_VAR(RC, [Resource Compiler for Windows resources])
if eval "test x$RC != x"; then
  windres=yes
fi
AM_CONDITIONAL(HAVE_WIN32RES, [test x$windres = xyes])

dnl -------------------------
dnl Test for printing support
dnl -------------------------
dnl
if test "x$enable_printer" = "xyes"; then
  AC_DEFINE([ENABLE_PRINTER], [1], [Enable printing support])
fi

dnl ----------------------------
dnl Check our char and int types
dnl ----------------------------
dnl
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(long)  
AC_CHECK_SIZEOF(int)     
AC_CHECK_SIZEOF(void *)

AC_TYPE_INT16_T
AC_TYPE_UINT16_T
AC_TYPE_INT32_T
AC_TYPE_UINT32_T

dnl --------------------------------------
dnl Check whether to add /usr/local or not
dnl (this is somewhat a religious problem)
dnl --------------------------------------
dnl
if test "`$CPP -v < /dev/null 2>&1 | grep '/usr/local/include' 2>&1`" = ""; then
  CPPFLAGS="$CPPFLAGS -I/usr/local/include"
  LDFLAGS="$LDFLAGS -L/usr/local/lib"
fi

dnl ------------------------------------
dnl Check for socket libs (AIX, Solaris)
dnl ------------------------------------
dnl
AC_CHECK_FUNCS(gethostbyname,,
  [AC_CHECK_LIB(nsl,gethostbyname,,[AC_CHECK_LIB(socket,gethostbyname)])])
AC_CHECK_FUNCS(setsockopt,,[AC_CHECK_LIB(socket,setsockopt)])

dnl --------------------
dnl Checks for socklen_t
dnl --------------------
dnl
AC_MSG_CHECKING([for socklen_t])
ac_cv_socklen_t=""
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <sys/types.h>
#include <sys/socket.h>
]],[[
socklen_t a=0;
getsockname(0,(struct sockaddr*)0, &a);
]])],
ac_cv_socklen_t="socklen_t",
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <sys/types.h>
#include <sys/socket.h>
]],[[
int a=0;
getsockname(0,(struct sockaddr*)0, &a);
]])],
ac_cv_socklen_t="int",
ac_cv_socklen_t="size_t"
)
)
AC_MSG_RESULT($ac_cv_socklen_t)
if test "$ac_cv_socklen_t" != "socklen_t"; then
  AC_DEFINE_UNQUOTED([socklen_t], [$ac_cv_socklen_t],
                     [Define the real type of socklen_t])
fi

dnl ---------------------------------
dnl Test for socket libs (Win32, DOS)
dnl ---------------------------------
dnl
case $target in
  *-*-mingw*)
    dnl Building on MinGW: use Windows sockets
    if test "x$enable_legacy_winsock" = "xyes" ; then
      LIBS="$LIBS -lwsock32"
    else
      LIBS="$LIBS -lws2_32"
    fi
    enable_threaded_dns=no
    ;;

  *-*-*djgpp*)
    dnl Building on DJGPP: use Watt-32 sockets
    LIBS="$LIBS -lwatt"
    LDFLAGS="$LDFLAGS -L/dev/env/WATT_ROOT/lib"
    CPPFLAGS="$CPPFLAGS -I/dev/env/WATT_ROOT/inc"
    enable_threaded_dns=no
    ;;

esac


dnl ----------------------
dnl Test for FLTK 1.3 library
dnl ----------------------
dnl
dnl For debugging and to be user friendly
AC_MSG_CHECKING([FLTK 1.3])
fltk_version="`fltk-config --version 2>/dev/null`"
case $fltk_version in
  1.3.*) AC_MSG_RESULT(yes)
         LIBFLTK_CXXFLAGS=`fltk-config --cxxflags`
         LIBFLTK_CFLAGS=`fltk-config --cflags`
         LIBFLTK_LIBS=`fltk-config --ldflags`;;
  ?*)    AC_MSG_RESULT(no)
         AC_ERROR(FLTK 1.3 required; version found: $fltk_version);;
  *)     AC_MSG_RESULT(no)
         AC_ERROR(FLTK 1.3 required; fltk-config not found)
esac

dnl ----------------
dnl Test for libjpeg
dnl ----------------
dnl
if test "x$enable_jpeg" = "xyes"; then
  AC_CHECK_HEADER(jpeglib.h, jpeg_ok=yes, jpeg_ok=no)

  if test "x$jpeg_ok" = "xyes"; then
    old_libs="$LIBS"
    AC_CHECK_LIB(jpeg, jpeg_destroy_decompress, jpeg_ok=yes, jpeg_ok=no)
    LIBS="$old_libs"
  fi

  if test "x$jpeg_ok" = "xyes"; then
    LIBJPEG_LIBS="-ljpeg"
    if test -n "$LIBJPEG_LIBDIR"; then
      LIBJPEG_LDFLAGS="-L$LIBJPEG_LIBDIR"
    fi
    if test -n "$LIBJPEG_INCDIR"; then
      LIBJPEG_CPPFLAGS="-I$LIBJPEG_INCDIR"
    fi
  else
    AC_MSG_WARN([*** No libjpeg found. Disabling jpeg images.***])
  fi
fi

if test "x$jpeg_ok" = "xyes"; then
  AC_DEFINE([ENABLE_JPEG], [1], [Enable JPEG images])
fi

dnl -------------
dnl Test for zlib
dnl -------------
dnl
AC_CHECK_HEADER(zlib.h, libz_ok=yes, libz_ok=no)

if test "x$libz_ok" = "xyes"; then
  old_libs="$LIBS"
  AC_CHECK_LIB(z, zlibVersion, libz_ok=yes, libz_ok=no)
  LIBS="$old_libs"
fi

if test "x$libz_ok" = xyes; then
  LIBZ_LIBS="-lz"
else
  AC_MSG_ERROR(zlib must be installed!)
fi

dnl ---------------
dnl Test for libpng
dnl ---------------
dnl
if test "x$enable_png" = "xyes"; then
  AC_MSG_CHECKING([for libpng-config])

dnl Check if the user hasn't set the variable $PNG_CONFIG
  if test -z "$PNG_CONFIG"; then
    PNG_CONFIG=`which libpng14-config`
    if test -z "$PNG_CONFIG"; then
      PNG_CONFIG=`which libpng12-config`
    fi
    if test -z "$PNG_CONFIG"; then
      PNG_CONFIG=`which libpng-config`
    fi
    if test -z "$PNG_CONFIG"; then
      PNG_CONFIG=`which libpng10-config`
    fi
  fi

dnl Check if the libpng-config script was found and is executable
  if test -n "$PNG_CONFIG" && test -x "$PNG_CONFIG"; then
    AC_MSG_RESULT([$PNG_CONFIG])
    png_ok="yes"
  else
    AC_MSG_RESULT([missing])
    png_ok="no"
  fi

  if test "x$png_ok" = "xyes"; then
dnl For debugging and to be user friendly
    AC_MSG_CHECKING([for libpng version])
    png_version=`$PNG_CONFIG --version`
    case $png_version in
      1.4.*) AC_MSG_RESULT([$png_version (newer version)]) ;;
      1.2.*) AC_MSG_RESULT([$png_version (newer version)]) ;;
      1.0.*) AC_MSG_RESULT([$png_version (older version)]) ;;
          *) AC_MSG_RESULT([ERROR]) ;;
    esac

dnl Try to use options that are supported by all libpng-config versions...
    LIBPNG_CFLAGS=`$PNG_CONFIG --cflags`
    LIBPNG_LIBS=`$PNG_CONFIG --ldflags`
    case $png_version in
      1.2.4*) LIBPNG_LIBS="$LIBPNG_LIBS `$PNG_CONFIG --libs`" ;;
    esac
  else
dnl Try to find libpng even though libpng-config wasn't found
    AC_CHECK_HEADERS(png.h libpng/png.h, png_ok=yes && break, png_ok=no)

    if test "x$png_ok" = "xyes"; then
      old_libs="$LIBS"
      AC_CHECK_LIB(png, png_sig_cmp, png_ok=yes, png_ok=no, $LIBZ_LIBS -lm)
      LIBS="$old_libs"

      if test "x$png_ok" = "xyes"; then
        LIBPNG_LIBS="-lpng -lm"
      fi
    fi

    if test "x$png_ok" = "xno"; then
      AC_MSG_WARN([*** No libpng found. Disabling PNG images ***])
    fi
  fi
fi

if test "x$png_ok" = "xyes"; then
  AC_DEFINE([ENABLE_PNG], [1], [Enable PNG images])
fi

dnl Check if support for GIF images should be compiled in
if test "x$enable_gif" = "xyes"; then
  AC_DEFINE([ENABLE_GIF], [1], [Enable GIF images])
fi

dnl --------------------------
dnl  Test for support for SSL
dnl --------------------------
dnl
if test "x$enable_ssl" = "xyes"; then
  AC_CHECK_HEADER(openssl/ssl.h, ssl_ok=yes, ssl_ok=no)

dnl This test is broken on Win32:
dnl ----------------------------
#  if test "x$ssl_ok" = "xyes"; then
#    old_libs="$LIBS"
#    AC_CHECK_LIB(ssl, SSL_library_init, ssl_ok=yes, ssl_ok=no, -lcrypto)
#    LIBS="$old_libs"
#  fi
#
#  if test "x$ssl_ok" = "xyes"; then
    LIBSSL_LIBS="-lcrypto -lssl"
    AC_MSG_WARN([*** Enabling ssl support. THIS IS ALPHA CODE!***])
#  else
#    AC_MSG_WARN([*** No libssl found. Disabling ssl support.***])
#  fi
fi

if test "x$ssl_ok" = "xyes"; then
  AC_DEFINE([ENABLE_SSL], [1], [Enable SSL support])
fi

dnl -----------------------------
dnl  Test for support for CyaSSL
dnl -----------------------------
dnl
if test "x$enable_cyassl" = "xyes"; then
  dnl CyaSSL usually installs to a separate dir to avoid conflict w/OpenSSL.
  dnl This is ugly, but it makes it easier to find the CyaSSL includes/libs:
  case $target in
    *-*-mingw*)
      LDFLAGS="$LDFLAGS -L/mingw/cyassl/lib"
      CPPFLAGS="$CPPFLAGS -I/mingw/cyassl/include"
      ;;
    *-*-*djgpp*)
      LDFLAGS="$LDFLAGS -L/dev/env/DJDIR/cyassl/lib"
      CPPFLAGS="$CPPFLAGS -I/dev/env/DJDIR/cyassl/include"
      ;;
  esac

  AC_CHECK_HEADER(openssl/ssl.h, cyassl_ok=yes, cyassl_ok=no)

  if test "x$cyassl_ok" = "xyes"; then
    LIBSSL_LIBS="-lcyassl"
    AC_MSG_WARN([*** Enabling ssl support. THIS IS ALPHA CODE!***])
  else
    AC_MSG_WARN([*** No libcyassl found. Disabling ssl support.***])
  fi
fi

if test "x$cyassl_ok" = "xyes"; then
  AC_DEFINE([ENABLE_SSL], [1], [Enable SSL support])
fi

dnl --------------------------------------------------------------
dnl Test for iconv functionality in libc or for libiconv usability
dnl --------------------------------------------------------------
AC_CHECK_HEADER(iconv.h, iconv_ok=yes, iconv_ok=no)
if test "x$iconv_ok" = "xyes"; then
  AC_CHECK_LIB(c, iconv_open, LIBICONV_LIBS="",
    AC_CHECK_LIB(iconv, iconv_open, LIBICONV_LIBS="-liconv", iconv_ok=no))
fi
if test "x$iconv_ok" = "xno"; then
  dnl Test for OpenBSD
  old_libs="$LIBS"
  LIBS="$old_libs -liconv"
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <iconv.h>
]],[[
iconv_open("","");
]])],
iconv_ok=yes,iconv_ok=no)
  LIBS="$old_libs"
  if test "x$iconv_ok" = "xyes"; then
     LIBICONV_LIBS="-liconv"
  fi
fi

if test "x$iconv_ok" = "xno"; then
  AC_MSG_ERROR(libiconv must be installed!)
fi

dnl ----------------------
dnl Check if we need to
dnl support the old 
dnl iconv interface
dnl ----------------------
if test "x$iconv_ok" = "xyes"; then
  old_libs="$LIBS"
  LIBS="$old_libs $LIBICONV_LIBS"
  old_cflags="$CFLAGS"
  CFLAGS="$CFLAGS -Werror"
  AC_LANG_PUSH([C++])
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <iconv.h>
]],[[
const char *inPtr;
char *outPtr;
size_t inLeft = 0, outRoom = 0;
iconv_t encoder = iconv_open("ASCII", "UTF-8");
iconv(encoder, &inPtr, &inLeft, &outPtr, &outRoom);
]])],
iconv_old=yes,iconv_old=no)
  AC_LANG_POP([C++])
  LIBS="$old_libs"
  CFLAGS="$old_cflags"

  if test "x$iconv_old" = "xyes"; then
    AC_DEFINE([inbuf_t], [const char], [Use const char pointers for older libiconv])
  else
    AC_DEFINE([inbuf_t], [char], [Use char pointers for newer libiconv])
  fi
fi

dnl ----------------------
dnl Test for POSIX threads
dnl ----------------------
dnl
if test -z "$LIBPTHREAD_LIBS"; then
case $target in
  *-*-linux*|*-*-solaris*)
    old_libs="$LIBS"
    AC_CHECK_LIB(pthread, pthread_create, LIBPTHREAD_LIBS="-lpthread")
    LIBS="$old_libs"
    ;;

  *-*-osf1*)
    AC_MSG_CHECKING(whether pthreads work)
    LIBPTHREAD_LIBS="-lpthread -lexc -ldb"
    AC_MSG_WARN([*** _Untested pthreads_ try setting LIBPTHREAD_LIBS manually if it doesn't work ***])
    ;;

  *-*-minix*)
    AC_MSG_NOTICE([Minix detected, skipping pthread detection])
    ;;

  *-*-mingw*)
    AC_MSG_NOTICE([MinGW detected, skipping pthread detection])
    ;;

  *-*-*djgpp*)
    AC_MSG_NOTICE([DJGPP detected, skipping pthread detection])
    ;;

  *)
    AC_MSG_CHECKING(whether threads work with -pthread)
    LDSAVEFLAGS=$LDFLAGS
    LDFLAGS="$LDFLAGS -pthread"
    AC_LINK_IFELSE([AC_LANG_CALL([],[pthread_create])],
pthread_ok=yes, pthread_ok=no)
    LDFLAGS=$LDSAVEFLAGS

    if test "x$pthread_ok" = "xyes"; then
      AC_MSG_RESULT(yes)
      LIBPTHREAD_LDFLAGS="-pthread"
    else
      AC_MSG_RESULT(no. Now we will try some libraries.)

      AC_SEARCH_LIBS(pthread_create, pthread, 
                     LIBPTHREADS_LIBS="-lpthread", 
      AC_SEARCH_LIBS(pthread_create, pthreads, 
                     LIBPTHREADS_LIBS="-lpthreads",
      AC_SEARCH_LIBS(pthread_create, c_r,
                     LIBPTHREADS_LIBS="-lc_r", thread_ok=no)))

      if test "x$thread_ok" = "xno"; then
        AC_MSG_WARN([*** No pthreads found. ***])
        AC_MSG_ERROR([*** Try setting LIBPTHREAD_LIBS manually to point to your pthreads library. ***])
        exit 1
      else
        AC_MSG_WARN([found a way to link threads, but it may not work...])
      fi
    fi
    ;;

esac
fi

dnl --------------------------
dnl Test for downloads support
dnl --------------------------
dnl
if test "x$enable_downloads" = "xyes"; then
  AC_MSG_CHECKING([for curl-config])

dnl Check if the user hasn't set the variable $CURL_CONFIG
  if test -z "$CURL_CONFIG"; then
    CURL_CONFIG=`which curl-config`
  fi

dnl Check if the curl-config script was found and is executable
  if test -n "$CURL_CONFIG" && test -x "$CURL_CONFIG"; then
    AC_MSG_RESULT([$CURL_CONFIG])
    curl_ok="yes"
  else
    AC_MSG_RESULT([missing])
    curl_ok="no"
  fi

  if test "x$curl_ok" = "xyes"; then
    CURL_CFLAGS=`$CURL_CONFIG --cflags`
    if test "x$enable_shared_libcurl" = "xyes"; then
      CURL_LIBS=`$CURL_CONFIG --libs`
    else
      CURL_LIBS=`$CURL_CONFIG --static-libs`
    fi
  else
    AC_MSG_WARN([*** No libcurl found. Disabling support for downloads ***])
  fi
fi

if test "x$curl_ok" = "xyes"; then
  AC_DEFINE([ENABLE_DOWNLOADS], [1], [Enable support for downloads])
fi

AM_CONDITIONAL(BUILD_TEST, [test x$enable_test = xyes])

dnl ---------------------------
dnl Link to libunicows on Win32
dnl ---------------------------
dnl
case $target in
   *-*-mingw*)
      LIBS="$LIBS -lunicows"
      ;;
esac

dnl --------------------
dnl Command line options
dnl --------------------
dnl
if test "x$enable_cookies" = "xno" ; then
  CFLAGS="$CFLAGS -DDISABLE_COOKIES"
fi
if test "x$enable_cookies_txt" = "xyes" ; then
  CFLAGS="$CFLAGS -DENABLE_COOKIES_TXT"
fi
if test "x$enable_ipv6" = "xyes" ; then
  CFLAGS="$CFLAGS -DENABLE_IPV6"
fi
if test "x$enable_debug" = "xyes" ; then
  dnl This is the default anyway on most platforms, but not Win32
  CFLAGS="$CFLAGS -g"
  CXXFLAGS="$CXXFLAGS -g"
fi
if test "x$enable_efence" = "xyes" ; then
  LIBS="-lefence $LIBS"
fi
if test "x$enable_gprof" = "xyes" ; then
  CFLAGS="$CFLAGS -pg"
  CXXFLAGS="$CXXFLAGS -pg"
fi
if test "x$enable_insure" = "xyes" ; then
  CC="insure -Zoi \"compiler $CC\""
  LIBS="$LIBS -lstdc++-2-libc6.1-1-2.9.0"
fi
if test "x$enable_threaded_dns" = "xyes" ; then
  CFLAGS="$CFLAGS -DD_DNS_THREADED"
fi
if test "x$enable_legacy_winsock" = "xyes" ; then
  CFLAGS="$CFLAGS -DENABLE_LEGACY_WINSOCK -DENABLE_LEGACY_DNS"
fi
if test "x$enable_ssl" = "xyes" ; then
  dnl Note: -DENABLE_OPENSSL is used to display the advertising
  dnl on about:splash as required by the OpenSSL software license.
  CFLAGS="$CFLAGS -DENABLE_SSL -DENABLE_OPENSSL"
  LIBS="$LIBS -lcrypto -lssl"
fi
if test "x$enable_cyassl" = "xyes" ; then
  CFLAGS="$CFLAGS -DENABLE_SSL"
  LIBS="$LIBS -lcyassl"
fi
if test "x$enable_downloads" = "xyes" && test "x$curl_ok" = "xyes" ; then
  CPPFLAGS="$CPPFLAGS -DENABLE_DOWNLOADS"
  if test "x$enable_shared_libcurl" != "xyes"; then
    dnl We define ENABLE_DOWNLOADS in config.h, but we still
    dnl need to provide this when linking to a static libcurl.
    CPPFLAGS="$CPPFLAGS -DCURL_STATICLIB"
  fi
fi
if test "x$enable_native_dialogs" = "xyes" ; then
  CXXFLAGS="$CXXFLAGS -DENABLE_NATIVE_DIALOGS"
fi
if test "x$enable_printer" = "xyes" ; then
  dnl This affects lots of code outside src/, so it's simpler to put it here:
  CPPFLAGS="$CPPFLAGS -DENABLE_PRINTER"
fi
if test "x$enable_rtfl" = "xyes" ; then
  CXXFLAGS="$CXXFLAGS -DDBG_RTFL"
fi

dnl -----------------------
dnl Checks for header files
dnl -----------------------
dnl
AC_CHECK_HEADERS(fcntl.h unistd.h sys/uio.h)

dnl --------------------------
dnl Check for compiler options
dnl --------------------------
dnl
if eval "test x$GCC = xyes"; then
  if test "`echo $CFLAGS | grep '\-D_REENTRANT' 2> /dev/null`" = ""; then
    CFLAGS="$CFLAGS -D_REENTRANT"
  fi
  if test "`echo $CFLAGS | grep '\-D_THREAD_SAFE' 2> /dev/null`" = ""; then
    CFLAGS="$CFLAGS -D_THREAD_SAFE"
  fi
  if test "`echo $CFLAGS | grep '\-Wall' 2> /dev/null`" = ""; then
    CFLAGS="$CFLAGS -Wall"
  fi
  if test "`echo $CFLAGS | grep -e '-W ' -e '-W$' 2> /dev/null`" = ""; then
    CFLAGS="$CFLAGS -W"
  fi
  if test "`echo $CFLAGS | grep '\-Wno-unused-parameter' 2> /dev/null`" = ""; then
    CFLAGS="$CFLAGS -Wno-unused-parameter"
  fi
  if test "`echo $CFLAGS | grep '\-Waggregate-return' 2> /dev/null`" = ""; then
    CFLAGS="$CFLAGS -Waggregate-return"
  fi
fi
dnl -----------
dnl CXX options
dnl -----------
dnl

if eval "test x$GCC = xyes"; then
  CXXFLAGS="$CXXFLAGS -Wall -W -Wno-unused-parameter -fno-rtti -fno-exceptions"
fi

AC_SUBST(LIBJPEG_LIBS)
AC_SUBST(LIBJPEG_LDFLAGS)
AC_SUBST(LIBJPEG_CPPFLAGS)
AC_SUBST(LIBPNG_LIBS)
AC_SUBST(LIBPNG_CFLAGS)
AC_SUBST(LIBZ_LIBS)
AC_SUBST(LIBSSL_LIBS)
AC_SUBST(LIBPTHREAD_LIBS)
AC_SUBST(LIBPTHREAD_LDFLAGS)
AC_SUBST(LIBFLTK_CXXFLAGS)
AC_SUBST(LIBFLTK_CFLAGS)
AC_SUBST(LIBFLTK_LIBS)
AC_SUBST(LIBICONV_LIBS)
AC_SUBST(CURL_CFLAGS)
AC_SUBST(CURL_LIBS)
AC_SUBST(datadir)

AC_CONFIG_FILES([
    Makefile
    dlib/Makefile
    doc/Makefile
    dw/Makefile
    lout/Makefile
    src/Makefile
    src/IO/Makefile
    test/Makefile
    widgets/Makefile
])

AC_OUTPUT
